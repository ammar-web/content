[MODEL: dataset="radware_access_logs_raw"]
alter
        xdm.source.ipv4 = if(source_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", source_ip, null),
        xdm.source.ipv6 = if(source_ip ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", source_ip, null),
        xdm.source.port = source_port,
        xdm.target.ipv4 = if(destination_ip ~= "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}", destination_ip, null),
        xdm.target.ipv6 = if(destination_ip ~= "[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}[a-fA-F0-9\:]{1,5}", destination_ip, null),
        xdm.network.application_protocol = protocol,
        xdm.network.http.method = if(http_method = "ACL", XDM_CONST.HTTP_METHOD_ACL, http_method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, http_method = "BIND", XDM_CONST.HTTP_METHOD_BIND, http_method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN, http_method = "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, http_method = "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, http_method = "COPY", XDM_CONST.HTTP_METHOD_COPY, http_method = "DELETE", XDM_CONST.HTTP_METHOD_DELETE, http_method = "GET", XDM_CONST.HTTP_METHOD_GET, http_method = "HEAD", XDM_CONST.HTTP_METHOD_HEAD, http_method = "LABEL", XDM_CONST.HTTP_METHOD_LABEL, http_method = "LINK", XDM_CONST.HTTP_METHOD_LINK, http_method = "LOCK", XDM_CONST.HTTP_METHOD_LOCK, http_method = "MERGE", XDM_CONST.HTTP_METHOD_MERGE, http_method = "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, http_method = "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, http_method = "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, http_method = "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, http_method = "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, http_method = "MOVE", XDM_CONST.HTTP_METHOD_MOVE, http_method = "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, http_method = "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, http_method = "PATCH", XDM_CONST.HTTP_METHOD_PATCH, http_method = "POST", XDM_CONST.HTTP_METHOD_POST, http_method = "PRI", XDM_CONST.HTTP_METHOD_PRI, http_method = "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, http_method = "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, http_method = "PUT", XDM_CONST.HTTP_METHOD_PUT, http_method = "REBIND", XDM_CONST.HTTP_METHOD_REBIND, http_method = "REPORT", XDM_CONST.HTTP_METHOD_REPORT, http_method = "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, http_method = "TRACE", XDM_CONST.HTTP_METHOD_TRACE, http_method = "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, http_method = "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, http_method = "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, http_method = "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, http_method = "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, http_method = "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, http_method = "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, to_string(http_method)),
        xdm.network.http.domain = host,
        xdm.network.http.url = concat(protocol, "://", host, to_string(arrayindex(regextract(request, "[\S]+\s([\S]+)"), 0))),
        xdm.source.user_agent = user_agent,
        xdm.network.http.referrer = referrer,
        xdm.event.duration = multiply(to_float(request_time), 1000),
        xdm.network.http.response_code = if(http_method = "100", XDM_CONST.HTTP_RSP_CODE_CONTINUE, http_method = "101", XDM_CONST.HTTP_RSP_CODE_SWITCHING_PROTOCOLS, http_method = "102", XDM_CONST.HTTP_RSP_CODE_PROCESSING, http_method = "103", XDM_CONST.HTTP_RSP_CODE_EARLY_HINTS, http_method = "200", XDM_CONST.HTTP_RSP_CODE_OK, http_method = "201", XDM_CONST.HTTP_RSP_CODE_CREATED, http_method = "202", XDM_CONST.HTTP_RSP_CODE_ACCEPTED, http_method = "203", XDM_CONST.HTTP_RSP_CODE_NON__AUTHORITATIVE_INFORMATION, http_method = "204", XDM_CONST.HTTP_RSP_CODE_NO_CONTENT, http_method = "205", XDM_CONST.HTTP_RSP_CODE_RESET_CONTENT, http_method = "206", XDM_CONST.HTTP_RSP_CODE_PARTIAL_CONTENT, http_method = "207", XDM_CONST.HTTP_RSP_CODE_MULTI__STATUS, http_method = "208", XDM_CONST.HTTP_RSP_CODE_ALREADY_REPORTED, http_method = "226", XDM_CONST.HTTP_RSP_CODE_IM_USED, http_method = "300", XDM_CONST.HTTP_RSP_CODE_MULTIPLE_CHOICES, http_method = "301", XDM_CONST.HTTP_RSP_CODE_MOVED_PERMANENTLY, http_method = "302", XDM_CONST.HTTP_RSP_CODE_FOUND, http_method = "303", XDM_CONST.HTTP_RSP_CODE_SEE_OTHER, http_method = "304", XDM_CONST.HTTP_RSP_CODE_NOT_MODIFIED, http_method = "305", XDM_CONST.HTTP_RSP_CODE_USE_PROXY, http_method = "307", XDM_CONST.HTTP_RSP_CODE_TEMPORARY_REDIRECT, http_method = "308", XDM_CONST.HTTP_RSP_CODE_PERMANENT_REDIRECT, http_method = "400", XDM_CONST.HTTP_RSP_CODE_BAD_REQUEST, http_method = "401", XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, http_method = "402", XDM_CONST.HTTP_RSP_CODE_PAYMENT_REQUIRED, http_method = "403", XDM_CONST.HTTP_RSP_CODE_FORBIDDEN, http_method = "404", XDM_CONST.HTTP_RSP_CODE_NOT_FOUND, http_method = "405", XDM_CONST.HTTP_RSP_CODE_METHOD_NOT_ALLOWED, http_method = "406", XDM_CONST.HTTP_RSP_CODE_NOT_ACCEPTABLE, http_method = "407", XDM_CONST.HTTP_RSP_CODE_PROXY_AUTHENTICATION_REQUIRED, http_method = "408", XDM_CONST.HTTP_RSP_CODE_REQUEST_TIMEOUT, http_method = "409", XDM_CONST.HTTP_RSP_CODE_CONFLICT, http_method = "410", XDM_CONST.HTTP_RSP_CODE_GONE, http_method = "411", XDM_CONST.HTTP_RSP_CODE_LENGTH_REQUIRED, http_method = "412", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_FAILED, http_method = "413", XDM_CONST.HTTP_RSP_CODE_CONTENT_TOO_LARGE, http_method = "414", XDM_CONST.HTTP_RSP_CODE_URI_TOO_LONG, http_method = "415", XDM_CONST.HTTP_RSP_CODE_UNSUPPORTED_MEDIA_TYPE, http_method = "416", XDM_CONST.HTTP_RSP_CODE_RANGE_NOT_SATISFIABLE, http_method = "417", XDM_CONST.HTTP_RSP_CODE_EXPECTATION_FAILED, http_method = "421", XDM_CONST.HTTP_RSP_CODE_MISDIRECTED_REQUEST, http_method = "422", XDM_CONST.HTTP_RSP_CODE_UNPROCESSABLE_CONTENT, http_method = "423", XDM_CONST.HTTP_RSP_CODE_LOCKED, http_method = "424", XDM_CONST.HTTP_RSP_CODE_FAILED_DEPENDENCY, http_method = "425", XDM_CONST.HTTP_RSP_CODE_TOO_EARLY, http_method = "426", XDM_CONST.HTTP_RSP_CODE_UPGRADE_REQUIRED, http_method = "428", XDM_CONST.HTTP_RSP_CODE_PRECONDITION_REQUIRED, http_method = "429", XDM_CONST.HTTP_RSP_CODE_TOO_MANY_REQUESTS, http_method = "431", XDM_CONST.HTTP_RSP_CODE_REQUEST_HEADER_FIELDS_TOO_LARGE, http_method = "451", XDM_CONST.HTTP_RSP_CODE_UNAVAILABLE_FOR_LEGAL_REASONS, http_method = "500", XDM_CONST.HTTP_RSP_CODE_INTERNAL_SERVER_ERROR, http_method = "501", XDM_CONST.HTTP_RSP_CODE_NOT_IMPLEMENTED, http_method = "502", XDM_CONST.HTTP_RSP_CODE_BAD_GATEWAY, http_method = "503", XDM_CONST.HTTP_RSP_CODE_SERVICE_UNAVAILABLE, http_method = "504", XDM_CONST.HTTP_RSP_CODE_GATEWAY_TIMEOUT, http_method = "505", XDM_CONST.HTTP_RSP_CODE_HTTP_VERSION_NOT_SUPPORTED, http_method = "506", XDM_CONST.HTTP_RSP_CODE_VARIANT_ALSO_NEGOTIATES, http_method = "507", XDM_CONST.HTTP_RSP_CODE_INSUFFICIENT_STORAGE, http_method = "508", XDM_CONST.HTTP_RSP_CODE_LOOP_DETECTED, http_method = "511", XDM_CONST.HTTP_RSP_CODE_NETWORK_AUTHENTICATION_REQUIRED, http_method = null, null, to_string(http_method)),
        xdm.source.location.country = country_code,
        xdm.observer.action = action,
        xdm.source.application.name = application_name,

